:plugin: cef
:type: codec

///////////////////////////////////////////
START - GENERATED VARIABLES, DO NOT EDIT!
///////////////////////////////////////////
:version: %VERSION%
:release_date: %RELEASE_DATE%
:changelog_url: %CHANGELOG_URL%
:include_path: ../../../../logstash/docs/include
///////////////////////////////////////////
END - GENERATED VARIABLES, DO NOT EDIT!
///////////////////////////////////////////

[id="plugins-{type}s-{plugin}"]

=== Cef codec plugin

include::{include_path}/plugin_header.asciidoc[]

==== Description

Implementation of a Logstash codec for the ArcSight Common Event Format (CEF)
Based on Revision 20 of Implementing ArcSight CEF, dated from June 05, 2013
https://community.saas.hpe.com/dcvta86296/attachments/dcvta86296/connector-documentation/1116/1/CommonEventFormatv23.pdf

If this codec receives a payload from an input that is not a valid CEF message, then it will
produce an event with the payload as the 'message' field and a '_cefparsefailure' tag.

==== Compatibility with the Elastic Common Schema (ECS)

This plugin can be used to decode CEF events _into_ the Elastic Common Schema, or to encode ECS-compatible events into CEF.
It can also be used _without_ ECS, encoding and decoding events using only CEF-defined field names and keys.

The ECS Compatibility mode for a specific plugin instance can be controlled by setting <<plugins-{type}s-{plugin}-ecs_compatibility>> when defining the codec:

[source]
    input {
      tcp {
        # ...
        codec => cef {
          ecs_compatibility => v1
        }
      }
    }

If left unspecified, the value of the `pipeline.ecs_compatibility` setting is used.

[id="plugins-{type}s-{plugin}-options"]
==== Cef Codec Configuration Options

[cols="<,<,<",options="header",]
|=======================================================================
|Setting |Input type|Required
| <<plugins-{type}s-{plugin}-delimiter>> |<<string,string>>|No
| <<plugins-{type}s-{plugin}-device>> |<<string,string>>|No
| <<plugins-{type}s-{plugin}-ecs_compatibility>> |<<string,string>>|No
| <<plugins-{type}s-{plugin}-fields>> |<<array,array>>|No
| <<plugins-{type}s-{plugin}-name>> |<<string,string>>|No
| <<plugins-{type}s-{plugin}-product>> |<<string,string>>|No
| <<plugins-{type}s-{plugin}-reverse_mapping>> |<<boolean,boolean>>|No
| <<plugins-{type}s-{plugin}-severity>> |<<string,string>>|No
| <<plugins-{type}s-{plugin}-signature>> |<<string,string>>|No
| <<plugins-{type}s-{plugin}-vendor>> |<<string,string>>|No
| <<plugins-{type}s-{plugin}-version>> |<<string,string>>|No
|=======================================================================

&nbsp;

[id="plugins-{type}s-{plugin}-delimiter"]
===== `delimiter` 

  * Value type is <<string,string>>
  * There is no default value for this setting.

If your input puts a delimiter between each CEF event, you'll want to set
this to be that delimiter.

For example, with the TCP input, you probably want to put this:

    input {
      tcp {
        codec => cef { delimiter => "\r\n" }
        # ...
      }
    }

This setting allows the following character sequences to have special meaning:

* `\\r` (backslash "r") - means carriage return (ASCII 0x0D)
* `\\n` (backslash "n") - means newline (ASCII 0x0A)

[id="plugins-{type}s-{plugin}-device"]
===== `device`

* Value type is <<string,string>>
* Supported values are:
** `observer`: indicates that device-specific fields represent the device used to _observe_ the event.
** `host`: indicates that device-specific fields represent the device on which the event _occurred_.
* The default value for this setting is `observer`.
* Option has no effect when <<plugins-{type}s-{plugin}-ecs_compatibility,`ecs_compatibility => disabled`>>.

Defines a set of device-specific CEF fields as either representing the device on which an
event _occurred_, or merely the device from which the event was _observed_.
This causes the relevant fields to be routed to either the `host` or the `observer`
top-level groupings.

If the codec handles data from a variety of sources, the ECS recommendation is to use `observer`.

[id="plugins-{type}s-{plugin}-ecs_compatibility"]
===== `ecs_compatibility`

* Value type is <<string,string>>
* Supported values are:
** `disabled`: uses CEF-defined field names in the event (e.g., `bytesIn`, `sourceAddress`)
** `v1`: supports ECS-compatible event fields (e.g., `[source][bytes]`, `[source][ip]`)
* Default value depends on which version of Logstash is running:
** When Logstash provides a `pipeline.ecs_compatibility` setting, its value is used as the default
** Otherwise, the default value is `disabled`.

Controls this plugin's compatibility with the
https://www.elastic.co/guide/en/ecs/current/index.html[Elastic Common Schema
(ECS)].

[id="plugins-{type}s-{plugin}-fields"]
===== `fields` 

  * Value type is <<array,array>>
  * Default value is `[]`
  * Option has no effect when _decoding_

Fields to be included in CEV extension part as key/value pairs

[id="plugins-{type}s-{plugin}-name"]
===== `name` 

  * Value type is <<string,string>>
  * Default value is `"Logstash"`
  * Option has no effect when _decoding_

Name field in CEF header. The new value can include `%{foo}` strings
to help you build a new value from other parts of the event.

[id="plugins-{type}s-{plugin}-product"]
===== `product` 

  * Value type is <<string,string>>
  * Default value is `"Logstash"`
  * Option has no effect when _decoding_

Device product field in CEF header. The new value can include `%{foo}` strings
to help you build a new value from other parts of the event.


[id="plugins-{type}s-{plugin}-reverse_mapping"]
===== `reverse_mapping`

  * Value type is <<boolean,boolean>>
  * Default value is `false`
  * Option has no effect when _decoding_

Set to true to adhere to the specifications and encode using the CEF key name (short name) for the CEF field names.

[id="plugins-{type}s-{plugin}-severity"]
===== `severity` 

  * Value type is <<string,string>>
  * Default value is `"6"`
  * Option has no effect when _decoding_

Severity field in CEF header. The new value can include `%{foo}` strings
to help you build a new value from other parts of the event.

Defined as field of type string to allow sprintf. The value will be validated
to be an integer in the range from 0 to 10 (including).
All invalid values will be mapped to the default of 6.

[id="plugins-{type}s-{plugin}-signature"]
===== `signature` 

  * Value type is <<string,string>>
  * Default value is `"Logstash"`
  * Option has no effect when _decoding_

Signature ID field in CEF header. The new value can include `%{foo}` strings
to help you build a new value from other parts of the event.

[id="plugins-{type}s-{plugin}-vendor"]
===== `vendor` 

  * Value type is <<string,string>>
  * Default value is `"Elasticsearch"`
  * Option has no effect when _decoding_

Device vendor field in CEF header. The new value can include `%{foo}` strings
to help you build a new value from other parts of the event.

[id="plugins-{type}s-{plugin}-version"]
===== `version` 

  * Value type is <<string,string>>
  * Default value is `"1.0"`
  * Option has no effect when _decoding_

Device version field in CEF header. The new value can include `%{foo}` strings
to help you build a new value from other parts of the event.


